{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Numpy learning\n",
    "### Written by Guru Sarath\n",
    "### 30 May 2019"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rank of an array\n",
    "Number of dimensions of the array is called rank of the array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15] Shape =  (16,) Type =  int32\n"
     ]
    }
   ],
   "source": [
    "rank1Array = np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) #Rank 1 array\n",
    "print(rank1Array, 'Shape = ',rank1Array.shape, 'Type = ', rank1Array.dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3 4 5]] Shape =  (1, 5)\n",
      "[[ 0  1  2  3  4]\n",
      " [ 5  6  7  8  9]\n",
      " [10 11 12 13 14]\n",
      " [15 16 17 18 19]] Shape =  (4, 5)\n"
     ]
    }
   ],
   "source": [
    "rank2Array_1 = np.array([[1,2,3,4,5]]) #Rank 2 array\n",
    "rank2Array_2 = np.array([[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14],[15,16,17,18,19]]) #Rank 2\n",
    "print(rank2Array_1, 'Shape = ',rank2Array_1.shape)\n",
    "print(rank2Array_2, 'Shape = ',rank2Array_2.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rank 1 array indexing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "15\n",
      "[1 2]\n",
      "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14]\n",
      "[ 0  2  4  6  8 10 12 14]\n",
      "[ 2  4  6  8 10]\n",
      "[15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0]\n",
      "[11 10  9  8  7  6  5]\n"
     ]
    }
   ],
   "source": [
    "print(rank1Array[0])\n",
    "print(rank1Array[1])\n",
    "print(rank1Array[-1])\n",
    "print(rank1Array[1:3]) #start : end # [start : end)\n",
    "print(rank1Array[1:-1])\n",
    "print(rank1Array[::2]) # start : end : step\n",
    "print(rank1Array[2:11:2])\n",
    "print(rank1Array[::-1]) # reverse an array\n",
    "print(rank1Array[11:4:-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rank 2 array indexing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n",
      "[10 11 12 13 14]\n",
      "[[ 0  2  4]\n",
      " [10 12 14]]\n",
      "[[ 4  3  2  1  0]\n",
      " [ 9  8  7  6  5]\n",
      " [14 13 12 11 10]\n",
      " [19 18 17 16 15]]\n",
      "[[15 16 17 18 19]\n",
      " [10 11 12 13 14]\n",
      " [ 5  6  7  8  9]\n",
      " [ 0  1  2  3  4]]\n"
     ]
    }
   ],
   "source": [
    "print(rank2Array_2[2,4]) # [row,col]\n",
    "print(rank2Array_2[2,])\n",
    "print(rank2Array_2[:5:2,:5:2]) # [row start : end , col start : end]\n",
    "print(rank2Array_2[:,::-1]) # Reverse each row\n",
    "print(rank2Array_2[::-1,:]) # Reverse the order of rows "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inf\n",
      "nan\n"
     ]
    }
   ],
   "source": [
    "print(np.inf)\n",
    "print(np.nan)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Numpy broadcasting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 1 1]\n",
      " [2 2 2]\n",
      " [3 3 3]\n",
      " [4 4 4]\n",
      " [5 5 5]]\n",
      "[[2 2 2]\n",
      " [3 3 3]\n",
      " [4 4 4]\n",
      " [5 5 5]\n",
      " [6 6 6]]\n",
      "[[3.5 3.5 3.5]\n",
      " [4.5 4.5 4.5]\n",
      " [5.5 5.5 5.5]\n",
      " [6.5 6.5 6.5]\n",
      " [7.5 7.5 7.5]]\n",
      "[[6.]\n",
      " [6.]\n",
      " [6.]\n",
      " [6.]\n",
      " [6.]]\n",
      "[[ 7.  7.  7.]\n",
      " [ 8.  8.  8.]\n",
      " [ 9.  9.  9.]\n",
      " [10. 10. 10.]\n",
      " [11. 11. 11.]]\n"
     ]
    }
   ],
   "source": [
    "matX = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5]]\n",
    "matX = np.array(matX)\n",
    "print(matX)\n",
    "\n",
    "matY =  matX + 1\n",
    "print(matY)\n",
    "\n",
    "matZ = matX + [2.5,2.5,2.5]\n",
    "print(matZ)\n",
    "\n",
    "mat_col = np.ones((5,1)) + 5\n",
    "print(mat_col)\n",
    "matP = matX + mat_col\n",
    "print(matP)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Numpy functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### arange"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4]\n",
      "[3 4 5 6 7 8 9]\n",
      "[ 3  8 13 18 23 28]\n",
      "[[ 0  1  2  3  4]\n",
      " [ 5  6  7  8  9]\n",
      " [10 11 12 13 14]\n",
      " [15 16 17 18 19]\n",
      " [20 21 22 23 24]]\n"
     ]
    }
   ],
   "source": [
    "print(np.arange(5))\n",
    "print(np.arange(3,10)) # (start, end)\n",
    "print(np.arange(3,30,5))  # (start, end, step)\n",
    "print(np.arange(25).reshape((5,5)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ones and zeros"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 1. 1. 1. 1.]\n",
      "[[1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1.]]\n",
      "[[0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "print(np.ones(5))\n",
    "print(   np.ones((5,5))   )\n",
    "print(  np.zeros((5,3))   )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### eye and identity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 0. 0. 0. 0.]\n",
      " [0. 1. 0. 0. 0.]\n",
      " [0. 0. 1. 0. 0.]\n",
      " [0. 0. 0. 1. 0.]\n",
      " [0. 0. 0. 0. 1.]]\n",
      "[[1. 0. 0. 0. 0.]\n",
      " [0. 1. 0. 0. 0.]\n",
      " [0. 0. 1. 0. 0.]\n",
      " [0. 0. 0. 1. 0.]\n",
      " [0. 0. 0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "print(np.eye(5, dtype=np.float))\n",
    "print(np.identity(5, dtype=np.float))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Any and All"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "all ------------\n",
      "True\n",
      "True\n",
      "True\n",
      "True\n",
      "True\n",
      "False\n",
      "False\n",
      "False\n",
      "True\n",
      "True\n",
      "any ------------\n",
      "True\n",
      "True\n",
      "True\n",
      "True\n",
      "True\n",
      "False\n",
      "True\n",
      "True\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "print('all ------------')\n",
    "print(np.all([1,2,3,4]))\n",
    "print(np.all([1,2,3,np.inf])) # Not a Number (NaN), positive infinity and negative infinity  \n",
    "print(np.all([1,2,3,np.nan])) # evaluate to True because these are not equal to zero. \n",
    "print(np.all([np.nan]))\n",
    "print(np.all([np.inf]))\n",
    "print(np.all([0,0,0,0]))\n",
    "print(np.all([1,2,3,4,0]))\n",
    "print(np.all([True, False]))\n",
    "print(np.all([True, True, True]))\n",
    "print(np.all([0.1, 7.5, 0.001]))\n",
    "print('any ------------')\n",
    "print(np.any([1,2,3,4]))\n",
    "print(np.any([1,2,3,np.inf]))\n",
    "print(np.any([1,2,3,np.nan]))\n",
    "print(np.any([np.nan]))\n",
    "print(np.any([np.inf]))\n",
    "print(np.any([0,0,0,0]))\n",
    "print(np.any([1,2,3,4,0]))\n",
    "print(np.any([True, False]))\n",
    "print(np.any([True, True, True]))\n",
    "print(np.any([0.1, 7.5, 0.001]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Axis = None\n",
      "True\n",
      "True\n",
      "True\n",
      "False\n",
      "Axis = 0\n",
      "[ True  True  True]\n",
      "[ True  True  True]\n",
      "[False  True  True]\n",
      "[False False False]\n",
      "Axis = 1\n",
      "[ True  True  True  True  True]\n",
      "[ True  True  True  True  True]\n",
      "[ True  True False  True  True]\n",
      "[False False False False False]\n"
     ]
    }
   ],
   "source": [
    "a = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]\n",
    "b = [[0,0,3],[0,5,6],[0,0,0],[0,11,12],[0,14,15]]\n",
    "print('Axis = None') #All elements\n",
    "print(np.any(a))\n",
    "print(np.all(a))\n",
    "print(np.any(b))\n",
    "print(np.all(b))\n",
    "print('Axis = 0') #Column wise\n",
    "print(np.any(a, axis=0))\n",
    "print(np.all(a, axis=0))\n",
    "print(np.any(b, axis=0))\n",
    "print(np.all(b, axis=0))\n",
    "print('Axis = 1') #Row wise\n",
    "print(np.any(a, axis=1))\n",
    "print(np.all(a, axis=1))\n",
    "print(np.any(b, axis=1))\n",
    "print(np.all(b, axis=1))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### rand and randn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.17668326 0.90313138 0.17241877 0.2956142  0.0397034 ]\n",
      "[ 1.45047000e-01 -1.30228634e+00 -1.64084245e-03 -4.26636246e-02\n",
      "  1.37105465e+00 -1.50155965e-01  2.12268332e+00 -5.74152885e-02\n",
      " -3.02729957e-01 -8.45862906e-01]\n"
     ]
    }
   ],
   "source": [
    "print(np.random.rand(5))\n",
    "print(np.random.randn(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### amin and amax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "[1 2 3]\n",
      "[ 3  6  9 12 15]\n"
     ]
    }
   ],
   "source": [
    "print(np.amin(b))\n",
    "print(np.amin(a, axis=0))\n",
    "print(np.amax(a, axis=1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Math functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.84147098  0.          0.89399666 -0.13235175  0.14112001]\n",
      "[ 2.  2.  8.  9. 10. 12.]\n",
      "[ 1.  1.  7.  9. 10. 11.]\n",
      "[[0.         0.69314718 1.09861229]\n",
      " [1.38629436 1.60943791 1.79175947]\n",
      " [1.94591015 2.07944154 2.19722458]\n",
      " [2.30258509 2.39789527 2.48490665]\n",
      " [2.56494936 2.63905733 2.7080502 ]]\n",
      "[[0.         1.         1.5849625 ]\n",
      " [2.         2.32192809 2.5849625 ]\n",
      " [2.80735492 3.         3.169925  ]\n",
      " [3.32192809 3.45943162 3.5849625 ]\n",
      " [3.70043972 3.80735492 3.9068906 ]]\n",
      "[[0.         0.30103    0.47712125]\n",
      " [0.60205999 0.69897    0.77815125]\n",
      " [0.84509804 0.90308999 0.95424251]\n",
      " [1.         1.04139269 1.07918125]\n",
      " [1.11394335 1.14612804 1.17609126]]\n"
     ]
    }
   ],
   "source": [
    "vals = [1,0,90,25,3]\n",
    "vals2 = [1.5,1.6,7.8,9,10,11.2]\n",
    "print(np.sin(vals))\n",
    "print(np.ceil(vals2))\n",
    "print(np.floor(vals2))\n",
    "print(np.log(a))\n",
    "print(np.log2(a))\n",
    "print(np.log10(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
